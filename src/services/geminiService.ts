import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold, GenerativeModel } from "https://esm.sh/@google/generative-ai@0.14.0";

// Lấy API key từ biến môi trường (nếu không có thì log cảnh báo, không crash build)
const apiKey = import.meta.env.VITE_GEMINI_API_KEY || "";
const genAI = new GoogleGenerativeAI(apiKey);

// Hàm chính để chỉnh sửa ảnh bằng Gemini AI
export async function editImageWithGemini(
  base64ImageData: string,
  mimeType: string,
  prompt: string
): Promise<string> {
  try {
    if (!apiKey) {
      console.warn("⚠️ Không tìm thấy VITE_GEMINI_API_KEY, AI có thể không hoạt động đúng.");
    }

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const imagePart = {
      inlineData: { data: base64ImageData, mimeType },
    };

    const systemInstruction =
      "You are an expert photo editor. Perform the following edit precisely and maintain the original image's quality and style unless otherwise specified. Do not add any text or watermarks to the image.";
    const fullPrompt = `${systemInstruction}\n\nUser request: "${prompt}"`;

    const result = await model.generateContent([
      { text: fullPrompt },
      imagePart,
    ]);

    const response = result.response;
    const imagePartResponse = response.candidates?.[0]?.content?.parts.find(
      (part: any) => part.inlineData && part.inlineData.mimeType?.startsWith("image/")
    );

    if (imagePartResponse?.inlineData?.data) {
      return imagePartResponse.inlineData.data;
    }

    const textPart = response.candidates?.[0]?.content?.parts.find((part: any) => part.text);
    if (textPart?.text) {
      throw new Error(`AI Request Denied: ${textPart.text}`);
    }

    throw new Error("No image was generated by the AI.");
  } catch (error: any) {
    console.error("Error calling Gemini API:", error);
    throw new Error(
      error?.message || "An unknown error occurred while communicating with Gemini AI."
    );
  }
}
