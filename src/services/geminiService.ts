import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "https://esm.sh/@google/generative-ai@0.14.0";
const apiKey = import.meta.env.VITE_GEMINI_API_KEY || "";
const genAI = new GoogleGenerativeAI(apiKey);

}


// Strict check after attempting to get the key.
// If the API_KEY is missing, the app will stop here, and the error will be caught by the global error handlers.
if (!apiKey) {
  let errorMessage = "Lỗi Cấu hình: Biến môi trường API_KEY chưa được đặt. ";
  
  if (typeof process === 'undefined') {
    errorMessage += "Đối tượng 'process' không được định nghĩa trong môi trường này. Không thể truy cập các biến môi trường.";
  } else if (!process.env) {
    errorMessage += "Đối tượng 'process.env' không được định nghĩa.";
  } else if (!process.env.API_KEY) {
    errorMessage += "Biến 'API_KEY' không được đặt trong 'process.env'.";
  }
  
  errorMessage += " Vui lòng đảm bảo nó được cấu hình chính xác để sử dụng ứng dụng.";
  throw new Error(errorMessage);
}

const ai = new GoogleGenAI({ apiKey: apiKey });

export const editImageWithGemini = async (
  base64ImageData: string,
  mimeType: string,
  prompt: string
): Promise<string> => {
  try {
    const model = 'gemini-2.5-flash-image';
    const imagePart = {
      inlineData: { data: base64ImageData, mimeType },
    };

    const systemInstruction = "You are an expert photo editor. Perform the following edit precisely and maintain the original image's quality and style unless otherwise specified. Do not add any text or watermarks to the image.";
    const fullPrompt = `${systemInstruction}\n\nUser request: "${prompt}"`;

    const response = await ai.models.generateContent({
      model,
      contents: {
        parts: [
          imagePart,
          { text: fullPrompt },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const imagePartResponse = response.candidates?.[0]?.content?.parts.find(
      (part) => part.inlineData && part.inlineData.mimeType.startsWith('image/')
    );

    if (imagePartResponse?.inlineData) {
      return imagePartResponse.inlineData.data;
    }

    // Handle cases where the model refuses or returns only text
    const textPart = response.candidates?.[0]?.content?.parts.find((part) => part.text);
    if (textPart?.text) {
         throw new Error(`AI Request Denied: ${textPart.text}`);
    }
    
    throw new Error('No image was generated by the AI. The model may have refused the request or returned an unexpected format.');
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred while communicating with the AI.';
    throw new Error(errorMessage);
  }
};
